---
layout: post
title: "[Data Structure] Graph"
subtitle:  "Graph"
categories: computerscience
tags: datastructure
---
## Graph 그래프
  
----  
  
- 노드와 간선으로 이루어진 노드간의 관계를 표현하는 자료구조  
- G = (v,e)로 표현 (v = vertex set / e = edge set)  
- 연결되어 있는 객체 간의 조직도를 표현할 수 있는 자료구조  
- 지하철 노선도, 도심의 도로 등 실생활에서 다양한 예를 표현 가능  
  
<br>
  
<center><img src="/assets/img/cs_ds_210708_1.png" width="100%" height="100%"></center>  
<center>출처 : https://velog.io/@tomato2532/%EA%B7%B8%EB%9E%98%ED%94%84</center>  
<center> 다양한 그래프의 형태 </center> 
  
<br>
  
### 그래프 관련 용어  
  
- 노드(node): 위치라는 개념 (그래프에선 정점(vertex)라고도 함)  
- 간선(edge): 위치 간의 관계 노드를 연결하는 선 (link, branch 라고도 부름)  
- 인접 정점(adjacent vertex): 간선에 의 해 직접 연결된 정점(노드)  
- 정점의 차수(degree): 무방향 그래프에서 하나의 정점에 인접한 정점의 수  
- 진입 차수(in-degree): 방향 그래프에서 외부에서 오는 간선의 수 (내차수 라고도 부름)  
- 진출 차수(out-degree): 방향 그래프에서 외부로 향하는 간선의 수 (외차수 라고도 부름)  
- 경로 길이(path length): 경로를 구성하는 데 사용된 간선의 수  
- 단순 경로(simple path): 처음 정점과 끝 정점을 제외하고 중복된 정점이 없는 경로  
- 사이클(cycle): 단순 경로의 시작 정점과 종료 정점이 동일한 경우  
 
  
<br>  
   
  
### 그래프의 특징   
  
- 그래프는 객체와 이에 대한 관계를 나타내는 유연한 방식인 네트워크 모델임  
- 하나의 노드에 2개 이상의 경로가 가능  
- 노드들 사이에 무방향/방향에서 양방향 경로를 가질 수 있음  
- self-loop 뿐 아니라 loop/circuit 모두 가능  
- 루트 노드, 부모-자식 관계라는 개념이 없음 (트리는 특수한 형태의 그래프의 일종)  
- 순회는 DFS나 BFS로 이루어짐  
  
<br>  
  
---  
  
  
### 그래프의 종류  
  
**무방향 그래프 vs 방향 그래프**  
<br>
  
<center><img src="/assets/img/cs_ds_210708_2.png" width="55%" height="55%"></center>  
<center>출처 : https://velog.io/@roro/</center>  
<center> 무방향 그래프 vs 방향 그래프 </center> 
  
<br>
  
- 무방향 그래프 (Undirected Graph)  
    - 무방향 그래프의 노드는 간선을 통해서 양방향으로 갈 수 있음  
    - 노드가 연결 되어 있을 경우 (A,B) 식으로 표현 ((B,A)와 동일) 
    - 무방향 그래프에 존재하는 노드의 모든 차수의 합 = 그래프의 간선 수의 2배  
- 방향 그래프(Dircted Graph)  
    - 간선에 방향성이 존재하는 그래프  
    - 노드가 A -> B로 가는 간선이 연결되어 있을 경우 <A,B> 식으로 표현 (<B,A>와는 상이)  
    - 방향 그래프에 있는 노드의 진입 차수 또는 진출 차수의 합 = 방향 그래프의 간선의 수(내차수 + 외차수)  
<br>
  
**연결 그래프 vs 비연결 그래프**  
<br>
  
<center><img src="/assets/img/cs_ds_210708_3.png" width="70%" height="70%"></center>  
<center>출처 : https://velog.io/@roro/</center>  
<center> 연결 그래프 vs 비연결 그래프 </center> 
  
<br>
  
- 연결 그래프 (Connected Graph)  
    - 무방향 그래프에 있는 모든 노드에 대해 항상 경로가 존재하는 경우  
- 비연결 그래프(Disconnected Graph)  
    - 무방향 그래프에서 특정 노드에 대해 경로가 존재하지 않는 경우  
<br>
  
  
**가중치 그래프**  
<br>
  
<center><img src="/assets/img/cs_ds_210708_4.png" width="70%" height="70%"></center>  
<center>출처 : https://velog.io/@roro/</center>  
<center> 가중치 그래프 </center> 
  
<br>
  
- 가중치 그래프 (Weighted Graph)  
    - 간선에 가중치 또는 비용이 할당된 그래프  
    - 네트워크 라고도 함 (도시-도시 연결, 통신망의 사용료, 회로 소자의 용량 등)
<br>
  
**완전 그래프**  
<br>
  
<center><img src="/assets/img/cs_ds_210708_5.png" width="70%" height="70%"></center>  
<center>출처 : https://velog.io/@roro/</center>  
<center> 완전 그래프 </center> 
  
<br>
  
- 완전 그래프 (Complete Graph)  
    - 그래프의 모든 노드가 서로 연결되어 있는 그래프  
        - N개의 정점을 가지는 무방향 완전 그래프 -> 간선의 개수 = (N(N-1))/2  
        - N개의 정점을 가지는 방향 완전 그래프 -> 간선의 개수 = N(N-1)  
<br>
  
**사이클 vs 비순환 그래프**  
  
- 사이클 (Cycle)  
    - 단순 경로의 시작 노드와 종료 노드가 동일한 경우  
- 비순환 그래프(Acyclic Graph)  
    - 사이클이 없는 그래프   
  
<br>
  
----  
  
  
### 그래프의 구현   
  
<br>
  
<center><img src="/assets/img/cs_ds_210708_6.png" width="60%" height="60%"></center>  
<center><img src="/assets/img/cs_ds_210708_7.png" width="120%" height="120%"></center>  
<center>출처 : https://www.youtube.com/user/cssin829</center>  
<center> 인접 행렬 vs 인접 리스트 </center> 
  
<br>
  
**인접 행렬 (Adjacency Matrix)**  
  
- NxN boolin 행렬으로 G[u][v]가 true면 u -> v로의 간선이 있다는 뜻  
    - 가중치 그래프에서는 boolin값이 아니라 가중치 값이 들어가 있을 수 있음  

**인접 리스트 (Adjacency List)**  
  
- 모든 노드를 인접리스트에 저장하고, 각각의 노드에 인접한 노드들을 리스트로 표현한 것  
    - 배열(혹은 해시 테이블)과 배열의 각 인덱스마다 존재하는 또 다른 리스트를 이용해서 인접 리스트를 표현  
  
**인접 행렬 vs 인접 리스트**  
  
- 시간 복잡도 비교  
|.|인접 행렬|인접 리스트|
|---|---|---|
|메모리|O(n^2)|O(n+m)|
|간선 존재 여부|O(1)|O(n)|
|u에 인접한 모든 노드 v 탐색|O(n)|O(인접노드 수)|
|새 간선 삽입|O(1)|O(1)|
|노드 삭제|O(1)|O(n)|  

- 간선 존재 여부  
    - 인접 행렬 : G[u][v] == 1 (가중 그래프일 경우 : G[u][v] > 0)  
                -> O(1)  
    - 인접 리스트 : G[u].search(v)  
                 -> O(n)  
- 새 간선 삽입  
    - 인접 행렬 : G[u][v] = 1  
                -> O(1)  
    - 인접 리스트 : G[u].push(v)  
                -> O(1)  
- 노드 삭제  
    - 인접 행렬 : G[u][v] = 0  
                -> O(1)  
    - 인접 리스트 : G[u].remove(x)  
                -> O(n)  
  
<br>
  
----  
  
  
### 그래프의 탐색  
  
그래프의 일반적인 두가지 탐색방법  
 - 깊이 우선 탐색 (Depth-First Search)  
 - 너비 우선 탐색 (Breadth-First Search)  
  
여기에 관련해서는 [다음에 포스팅 할 글] 참고
  
<br>
  
----  
  
### 참고  
  
[잔재미코딩](https://www.fun-coding.org/Chapter10-tree.html)  
[신찬수 교수님 유튜브](https://www.youtube.com/user/cssin829)  
[위키 백과](https://ko.wikipedia.org/wiki/%ED%8A%B8%EB%A6%AC_%EA%B5%AC%EC%A1%B0)  
[Heee's Development Blog](https://gmlwjd9405.github.io/2018/08/13/data-structure-graph.html)  
[janjanlog](https://velog.io/@roro/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EA%B7%B8%EB%9E%98%ED%94%84-DFS-BFS)  
  
----  
  

